给定一个二叉树，判断其是否是一个有效的二叉搜索树。 假设一个二叉搜索树具有如下特征： 节点的左子树只包含小于当前节点的数。 节点的右子树只包含大于当前节点的数。 所有左子树和右子树自身必须也是二叉搜索树。

按着二叉搜索树的性质，左边的小于自己的父节点， 右边的大于父节点， 我们就会发现如果用中序遍历， 其实这个二叉树就是一个递增序列， 将遍历结果存储在列表里然后进行查找比较即可

In [ ]:
class Solution(object):
    def isValidBST(self, root):

        if root == None:
            return True
        nums = []
        nums = self.Search(root, nums)
        if len(nums) <= 1:
            return True
        else:
            for i in range(1, len(nums)):
                if nums[i] <= nums[i - 1]:
                    return False
            return True

    def Search(self, root, nums):
        if root == None:
            return None
        self.Search(root.left, nums)
        nums.append(root.val)
        self.Search(root.right, nums)
        return nums
