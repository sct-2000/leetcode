给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。 例如，从根到叶子节点路径 1->2->3 代表数字 123。 计算从根到叶子节点生成的所有数字之和。 说明: 叶子节点是指没有子节点的节点。

In [ ]:
class Solution:
    def sumNumbers(self, root: TreeNode) -> int:

        node = root
        Stack = []
        final = 0

        while node or Stack:
            # print(final)

            if Stack:    # 初始判定
                temp = Stack[-1][1]
            else:
                temp = 0

            if node:  # 入栈
                Stack.append([node, temp * 10 + node.val])

            if node and node.left:  # 当左儿子
                node = node.left
            elif node and node.right:  # 当右儿子
                node = node.right
            else:   # 没有左右
                if node:  # 并且是叶子节点，final累加
                    final += Stack[-1][1]
                Stack.pop()  # 将叶子节点弹出

                while 1:   # 第6条和第7条。无限循环。

                    if Stack and Stack[-1][0].left == node and Stack[-1][0].right:  # 我是左二子，爸爸还有右儿子。
                        node = Stack[-1][0].right
                        break
                    elif Stack:  # 我就是爸爸的右儿子。
                        node = Stack.pop()[0]
                    else:  # 全查完了。收摊。
                        node = None
                        break

        return final
