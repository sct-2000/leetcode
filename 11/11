一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。 问总共有多少条不同的路径？

先审题，题目给定一个 m \times nm×n 的网格，左上角放置一个机器人，右下角为终点，问机器人到达终点的路径有多少条？

其中机器人的移动规则为：

每次只能向下或者向右移动一步。 现在假设 f(m, n)f(m,n) 表示从左上角到达终点的总路径数。由于机器人每次只能向下或者向右移动，那么要到达右下角只能是从上方或者左边的格子移动过来。也就是此时递归求解释为：

f(m, n) = f(m-1, n) + f(m, n-1) f(m,n)=f(m−1,n)+f(m,n−1) 这里加上递归终止条件，就能够求得最终的结果。但是这种自底向上的递归中间会有大量重复的计算，这里我们可以将其改为自顶向下的递推。

In [ ]:
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        dp = [[0] * n for _ in range(m)]

        # 初始化
        for i in range(m):
            dp[i][0] = 1
        
        for j in range(n):
            dp[0][j] = 1

        # 根据转移方程进行递推
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i-1][j] + dp[i][j-1]
        
        return dp[m-1][n-1]
        # return dp[-1][-1]
