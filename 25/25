给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。 相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。

主要思想是，从顶层往底，依次遍历选择时，无法得知当前选择结果是否为最优，局部最优并不等价于全局最优， 因而反向思考，由底部向上遍历， 每次选择下一层的可选数较小的一个，向上累加，金字塔顶端即为最小的路径和。

In [ ]:
class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        def helper(depth, pos, t):
            if depth == len(t) - 1:
                return t[depth][pos]
            left = helper(depth + 1, pos, t)
            right = helper(depth + 1, pos+1, t)

            return min(left, right) + t[depth][pos]
        if not triangle or len(triangle) < 1 or len(triangle[0]) < 1:
            return 0
        res = helper(0, 0, triangle)
        return res
